{"version":3,"sources":["components/layout/AlertIcon.js","components/GameMap/GameField.png","constants/alertConstants.js","redux/actions/alertAction.js","components/GameMap/GameMap.js","redux/actions/arrowActions.jsx","components/TableUI.js","components/DrawerTable.js","constants/usefulConstants.js","components/DrawerRight.js","components/timer/timer.jsx","App.js","screens/ResultScreen.js","reportWebVitals.js","redux/reducers/arrowGroupReducers.jsx","redux/reducers/alertReducer.js","redux/reducers/index.jsx","index.js"],"names":["connect","state","alertList","alertReducer","alert","length","map","Alert","style","marginTop","severity","alertType","msg","SET_ALERT","REMOVE_ALERT","uuid","require","setAlert","dispatch","id","v4","type","payload","setTimeout","arrowNumber","arrowList","numberOfArrows","redArrow","redArrows","blueArrow","blueArrows","triggerAlert","addingArrow","trialID","timeElapsed","className","src","GameFieldImage","alt","useMap","name","shape","coords","href","onClick","hover","RLeft","RRight","RTop","RCenter","RBottom","BLeft","BRight","BTop","BCenter","BBottom","AddingArrowAction","trialId","barrelNo","arrow","currentTime","arrowType","barrel","time","DeletingArrowAction","idNo","barrelType","global","MsToTime","s","ms","secs","mins","columns","label","maxWidth","align","useStyles","makeStyles","root","width","container","minHeight","maxHeight","deleteArrow","RlapPot","pot","classes","React","useState","page","rowsPerPage","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","minWidth","TableBody","slice","row","role","tabIndex","Button","globalID","TableUI","console","log","Besttime","SERVER_URL","list","fullList","saudara","marginRight","flexDirection","flexWrap","addArrow","top","left","bottom","right","setState","toggleDrawer","anchor","open","event","key","renderRedPots","setRenderRedPots","renderBluePots","setRenderBluePots","bestTimeRed","setbestTimeRed","bestTimeBlue","setbestTimeBlue","loadBestTimeRed","a","axios","get","data","loadBestTimeBlue","useEffect","tempArray","Object","values","forEach","potData","eachData","push","sort","b","clsx","onKeyDown","List","Typography","variant","marginLeft","color","each","DrawerTable","Fragment","position","Drawer","onClose","theme","flexGrow","childTable","paddingLeft","paper","padding","spacing","textAlign","palette","text","secondary","startOnce","setstartOnce","intervalFunc","setintervalFunc","setRLeft","setRRight","setRTop","setRBottom","setRCenter","setBLeft","setBRight","setBTop","setBBottom","setBCenter","settimeElapsed","toggleTimer","settoggleTimer","setEndGame","StopAction","timePlaceholder","Date","now","clearInterval","redViolation","setRedViolation","blueViolation","setBlueViolation","insideText","setinsideText","endGame","redUpload","besttime","config","headers","post","bestTime","blueUpload","redRegularUpload","trial","blueRegularUpload","incrementTrialId","seeResultButton","setSeeResultButton","handleUpload","tempArrayRed","tempArrayBlue","parseFloat","settrialId","getTrialId","history","useHistory","Grid","justifyContent","Switch","checked","onChange","inputProps","disabled","setInterval","temp","TextField","defaultValue","size","target","value","toLowerCase","handleTextFieldKeyDown","flex","startIcon","prev","marginBottom","someMargin","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","arrowTemplate","barrelTarget","arrowReducer","action","newArrow","newObject","newArray","currentType","charAt","filter","arrows","combineReducers","middleware","thunk","store","createStore","rootReducers","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaefe722.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Alert from '@material-ui/lab/Alert'\n\n// const useStyles = makeStyles((theme) => ({\n//     root: {\n//         width: '100%',\n//         '& > * + *': {\n//             marginTop: theme.spacing(2),\n//         },\n//     },\n// }))\n\nconst AlertIcon = ({ alertList }) => {\n    // console.log('alert list: ', alertList)\n    // return 'hi'\n\n    return (\n        alertList != null &&\n        alertList.length > 0 &&\n        alertList.map((alert) => {\n            return (\n                <Alert style={{ marginTop: '2px' }} severity={alert.alertType}>\n                    {alert.msg}\n                </Alert>\n            )\n        })\n    )\n\n    // const classes = useStyles()\n    // return (\n    //     {\n    //         alertList != null &&\n    //         alertList.length > 0 &&\n    //         alertList.map((alert) => (\n    //             <Alert severity={alert.alertType}>{alert.msg}</Alert>\n    //         ))\n    //     }\n    // )\n    // return { []alerts.map((each) => each.msg) }\n    // return { alerts }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        alertList: state.alertReducer.alert,\n    }\n}\n\nexport default connect(mapStateToProps)(AlertIcon)\n","export default __webpack_public_path__ + \"static/media/GameField.327b5015.png\";","export const SET_ALERT = 'SET_ALERT'\nexport const REMOVE_ALERT = 'REMOVE_ALERT'\n","import { SET_ALERT, REMOVE_ALERT } from '../../constants/alertConstants'\nvar uuid = require('uuid')\n\nexport const setAlert = (msg = 'Arrow Added', alertType = 'success') => (\n    dispatch,\n) => {\n    const id = uuid.v4()\n\n    dispatch({\n        type: SET_ALERT,\n        payload: { msg, alertType, id },\n    })\n\n    setTimeout(() => dispatch({ type: REMOVE_ALERT, payload: id }), 1500)\n}\n","import React, { Component } from 'react'\nimport GameFieldImage from './GameField.png'\nimport './map.css'\nimport { setAlert } from '../../redux/actions/alertAction'\nimport { connect } from 'react-redux'\n\nconst GameMap = ({\n    addingArrow,\n    arrowNumber,\n    trialID,\n    timeElapsed,\n    triggerAlert,\n    redArrow,\n    blueArrow,\n}) => {\n    return (\n        <div>\n            <img\n                // style={{ maxWidth: '400px' }}\n                className=\"GameFieldImage\"\n                src={GameFieldImage}\n                alt=\"error\"\n                useMap=\"#GameField\"\n            />\n            <map name=\"GameField\">\n                <area\n                    // red1\n                    shape=\"circle\"\n                    coords=\"201,316,10\"\n                    alt=\"buttonerror\"\n                    href=\"#\"\n                    onClick={() => {\n                        addingArrow(\n                            trialID,\n                            'RLeft',\n                            arrowNumber,\n                            timeElapsed,\n                            'RED',\n                        )\n                        triggerAlert('Arrow Added at Pot Red Left', 'success')\n                    }}\n                    hover=\"true\"\n                />\n                <area\n                    // red 2\n                    shape=\"circle\"\n                    coords=\"403,316,10\"\n                    alt=\"buttonerror\"\n                    href=\"#\"\n                    onClick={() => {\n                        addingArrow(\n                            trialID,\n                            'RRight',\n                            arrowNumber,\n                            timeElapsed,\n                            'RED',\n                        )\n\n                        triggerAlert('Arrow Added at Pot Red Right', 'success')\n                    }}\n                    hover=\"true\"\n                />\n                <area\n                    // blue top\n                    shape=\"circle\"\n                    coords=\"285,176,10\"\n                    alt=\"buttonerror\"\n                    href=\"#\"\n                    onClick={() => {\n                        // console.log('blue top')\n                        addingArrow(\n                            trialID,\n                            'BTop',\n                            arrowNumber,\n                            timeElapsed,\n                            'BLUE',\n                        )\n\n                        triggerAlert('Arrow Added at Pot Blue Top', 'success')\n                    }}\n                    hover=\"true\"\n                />\n                <area\n                    shape=\"circle\"\n                    coords=\"285,428,10\"\n                    alt=\"buttonerror\"\n                    href=\"#\"\n                    onClick={() => {\n                        addingArrow(\n                            trialID,\n                            'BBottom',\n                            arrowNumber,\n                            timeElapsed,\n                            'BLUE',\n                        )\n                        triggerAlert(\n                            'Arrow Added at Pot Blue Bottom',\n                            'success',\n                        )\n                    }}\n                    hover=\"true\"\n                />\n                <area\n                    shape=\"circle\"\n                    coords=\"285,302,10\"\n                    alt=\"buttonerror\"\n                    href=\"#\"\n                    onClick={() => {\n                        addingArrow(\n                            trialID,\n                            'BCenter',\n                            arrowNumber,\n                            timeElapsed,\n                            'BLUE',\n                        )\n                        triggerAlert(\n                            'Arrow Added at Pot Blue Center',\n                            'success',\n                        )\n                    }}\n                    hover=\"true\"\n                />\n                <area\n                    shape=\"circle\"\n                    coords=\"201, 287, 10\"\n                    alt=\"buttonerror\"\n                    href=\"#\"\n                    onClick={() => {\n                        addingArrow(\n                            trialID,\n                            'BLeft',\n                            arrowNumber,\n                            timeElapsed,\n                            'BLUE',\n                        )\n\n                        triggerAlert('Arrow Added at Pot Blue Left', 'success')\n                    }}\n                    hover=\"true\"\n                    className=\"test\"\n                />\n                <area\n                    shape=\"circle\"\n                    coords=\"403,287,10\"\n                    alt=\"buttonerror\"\n                    href=\"#\"\n                    onClick={() => {\n                        addingArrow(\n                            trialID,\n                            'BRight',\n                            arrowNumber,\n                            timeElapsed,\n                            'BLUE',\n                        )\n\n                        triggerAlert('Arrow Added at Pot Blue Right', 'success')\n                    }}\n                    hover=\"true\"\n                />\n                <area\n                    shape=\"circle\"\n                    coords=\"320,176,10\"\n                    alt=\"buttonerror\"\n                    href=\"#\"\n                    onClick={() => {\n                        addingArrow(\n                            trialID,\n                            'RTop',\n                            arrowNumber,\n                            timeElapsed,\n                            'RED',\n                        )\n\n                        triggerAlert('Arrow Added at Pot Red Top', 'success')\n                    }}\n                    hover=\"true\"\n                />\n                <area\n                    shape=\"circle\"\n                    coords=\"320,428,10\"\n                    alt=\"buttonerror\"\n                    href=\"#\"\n                    onClick={() => {\n                        addingArrow(\n                            trialID,\n                            'RBottom',\n                            arrowNumber,\n                            timeElapsed,\n                            'RED',\n                        )\n                        triggerAlert('Arrow Added at Pot Red Bottom', 'success')\n                    }}\n                    hover=\"true\"\n                />\n                <area\n                    shape=\"circle\"\n                    coords=\"320,302,10\"\n                    alt=\"buttonerror\"\n                    href=\"#\"\n                    onClick={() => {\n                        addingArrow(\n                            trialID,\n                            'RCenter',\n                            arrowNumber,\n                            timeElapsed,\n                            'RED',\n                        )\n                        triggerAlert('Arrow Added at Pot Red Center', 'success')\n                    }}\n                    hover=\"true\"\n                />\n            </map>\n\n            <div>\n                <p className=\"PotsStatus rleft\">R1:{redArrow.RLeft.length}</p>\n                <p className=\"PotsStatus rright\">R2:{redArrow.RRight.length}</p>\n                <p className=\"PotsStatus rtop\">R3:{redArrow.RTop.length}</p>\n                <p className=\"PotsStatus rcenter\">\n                    R4:{redArrow.RCenter.length}\n                </p>\n                <p className=\"PotsStatus rbottom\">\n                    R5:{redArrow.RBottom.length}\n                </p>\n                <p className=\"PotsStatusB bleft\">B1:{blueArrow.BLeft.length}</p>\n                <p className=\"PotsStatusB bright\">\n                    B2:{blueArrow.BRight.length}\n                </p>\n                <p className=\"PotsStatusB btop\">B3:{blueArrow.BTop.length}</p>\n                <p className=\"PotsStatusB bcenter\">\n                    B4:{blueArrow.BCenter.length}\n                </p>\n                <p className=\"PotsStatusB  bbottom\">\n                    B5:{blueArrow.BBottom.length}\n                </p>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        arrowNumber: state.arrowList.numberOfArrows,\n        redArrow: state.arrowList.redArrows,\n        blueArrow: state.arrowList.blueArrows,\n        // currentTime: state.timer.time,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        triggerAlert: (msg = 'Arrow Added', alertType = 'success') => {\n            dispatch(setAlert(msg, alertType))\n        },\n        // deleteArrow: (id) => {\n        //     dispatch(setAlert(id))\n        // },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameMap)\n","const ADD_ARROW = \"ADD_ARROW\"\nconst DELETE_ARROW = \"DELETE_ARROW\"\n//dont forget to edit it out\nconst AddingArrowAction = (trialId, barrelNo, arrow, currentTime, arrowType) => {\n    return ({\n        type: ADD_ARROW,\n        payload: {\n            trialId: trialId,\n            barrel: barrelNo,\n            arrow: arrow,\n            time: currentTime,\n            type: arrowType\n        }\n    })\n}\n\nconst DeletingArrowAction = (idNo, barrelType) => {\n    //i feel like I could just remove the end on it\n    return ({\n        type: DELETE_ARROW,\n        payload: {\n            global: idNo,\n            barrel: barrelType\n        }\n    })\n}\n\nexport { AddingArrowAction, DeletingArrowAction }","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport TableRow from '@material-ui/core/TableRow'\nimport Button from '@material-ui/core/Button'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nimport { connect } from 'react-redux'\nimport { DeletingArrowAction } from '../redux/actions/arrowActions'\n\nconst MsToTime = (s) => {\n    var ms = s % 1000\n    s = (s - ms) / 1000\n    var secs = s % 60\n    s = (s - secs) / 60\n    var mins = s % 60\n    var hrs = (s - mins) / 60\n\n    return hrs + ':' + mins + ':' + secs + '.' + ms\n}\n\nconst columns = [\n    { id: 'name', label: 'Arrow', maxWidth: 50, align: 'left' },\n    { id: 'code', label: 'Time', maxWidth: 100, align: 'left' },\n    { id: 'delete', label: 'X', maxWidth: 50, align: 'left' },\n]\n\nconst useStyles = makeStyles({\n    root: {\n        width: '20%',\n    },\n    container: {\n        minHeight: 200,\n        maxHeight: 200,\n    },\n})\n\nconst TableUI = ({ RlapPot, pot, deleteArrow }) => {\n    const classes = useStyles()\n\n    // console.log('rlappot: ', RlapPot)\n\n    const [page, setPage] = React.useState(0)\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage)\n    }\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value)\n        setPage(0)\n    }\n\n    // console.log('rlap pot: ', RlapPot)\n\n    return (\n        // <Paper className={classes.root}>\n        <Paper>\n            <TableContainer className={classes.container}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((column) => (\n                                <TableCell\n                                    key={column.id}\n                                    align={column.align}\n                                    style={{ minWidth: column.minWidth }}\n                                >\n                                    {column.label}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {RlapPot.slice(\n                            page * rowsPerPage,\n                            page * rowsPerPage + rowsPerPage,\n                        ).map((row) => {\n                            // console.log(row)\n                            return (\n                                <TableRow\n                                    hover\n                                    role=\"checkbox\"\n                                    tabIndex={-1}\n                                    // key={row.code}\n                                >\n                                    <TableCell>{row.arrow}</TableCell>\n                                    <TableCell>{MsToTime(row.time)}</TableCell>\n                                    <TableCell>\n                                        <Button\n                                            onClick={() => {\n                                                // console.log('deleting', row)\n                                                deleteArrow(\n                                                    row.globalID,\n                                                    row.barrel,\n                                                )\n                                            }}\n                                        >\n                                            <DeleteIcon />\n                                        </Button>\n                                    </TableCell>\n                                </TableRow>\n                            )\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            {/* <TablePagination\n                rowsPerPageOptions={[10, 25, 100]}\n                component=\"div\"\n                count={RlapPot.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            /> */}\n        </Paper>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        deleteArrow: (idNo, barrelType) => {\n            dispatch(DeletingArrowAction(idNo, barrelType))\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableUI)\n","import React, { useEffect, useCallback } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport TableRow from '@material-ui/core/TableRow'\n\nconst MsToTime = (s) => {\n    var ms = s % 1000\n    s = (s - ms) / 1000\n    var secs = s % 60\n    s = (s - secs) / 60\n    var mins = s % 60\n    var hrs = (s - mins) / 60\n\n    return hrs + ':' + mins + ':' + secs + '.' + ms\n}\n\nconst columns = [\n    { id: 'name', label: 'Arrow No', maxWidth: 50, align: 'left' },\n    { id: 'code', label: 'Time', maxWidth: 100, align: 'left' },\n]\n\nconst useStyles = makeStyles({\n    root: {\n        width: '20%',\n    },\n    container: {\n        minHeight: 200,\n        maxHeight: 200,\n    },\n})\n\nconst TableUI = ({ RlapPot, pot }) => {\n    const classes = useStyles()\n\n    // console.log('rlappot: ', RlapPot)\n\n    const [page, setPage] = React.useState(0)\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage)\n    }\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value)\n        setPage(0)\n    }\n\n    let bestTimeData = [\n        { arrow: 1, time: 180 },\n        { arrow: 2, time: 180 },\n        { arrow: 3, time: 180 },\n        { arrow: 4, time: 180 },\n        { arrow: 5, time: 180 },\n        { arrow: 6, time: 180 },\n        { arrow: 7, time: 180 },\n    ]\n\n    // useEffect(() => {}, [RlapPot])\n\n    // useEffect(() => {\n    //     RlapPot.map((each, index) => {\n    //         let objClone = { ...each, ...bestTimeData[index] }\n    //         console.log('obj clone: ', objClone)\n    //     })\n    //     // console.log('bruh')\n    // }, [])\n\n    console.log('drawer table pot: ', RlapPot)\n\n    return (\n        // <Paper className={classes.root}>\n\n        <TableBody>\n            {RlapPot.slice(\n                page * rowsPerPage,\n                page * rowsPerPage + rowsPerPage,\n            ).map((row) => {\n                return (\n                    <TableRow\n                        hover\n                        role=\"checkbox\"\n                        tabIndex={-1}\n                        // key={row.code}\n                    >\n                        <TableCell>{row.arrow}</TableCell>\n                        <TableCell>{MsToTime(row.time)}</TableCell>\n                        <TableCell>{MsToTime(row.Besttime)}</TableCell>\n                    </TableRow>\n                )\n            })}\n        </TableBody>\n    )\n}\n\nexport default TableUI\n","export const SERVER_URL = 'http://localhost:8080'\n","import React, { useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Drawer from '@material-ui/core/Drawer'\nimport Button from '@material-ui/core/Button'\nimport List from '@material-ui/core/List'\nimport Paper from '@material-ui/core/Paper'\nimport Table from '@material-ui/core/Table'\nimport Grid from '@material-ui/core/Grid'\nimport Divider from '@material-ui/core/Divider'\nimport Typography from '@material-ui/core/Typography'\n\nimport ListItem from '@material-ui/core/ListItem'\nimport { setAlert } from '../redux/actions/alertAction'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport {\n    AddingArrowAction,\n    DeletingArrowAction,\n} from '../redux/actions/arrowActions'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableRow from '@material-ui/core/TableRow'\n\nimport ListItemText from '@material-ui/core/ListItemText'\nimport InboxIcon from '@material-ui/icons/MoveToInbox'\nimport MailIcon from '@material-ui/icons/Mail'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport { connect } from 'react-redux'\nimport DrawerTable from './DrawerTable'\n\nimport axios from 'axios'\n\nimport { SERVER_URL } from '../constants/usefulConstants'\n\nconst columns = [\n    { id: 'name', label: 'Arrow', maxWidth: 50, align: 'left' },\n    { id: 'code', label: 'Time', maxWidth: 100, align: 'left' },\n    { id: 'bestTime', label: 'Best Time', maxWidth: 100, align: 'left' },\n]\n\nconst useStyles = makeStyles({\n    list: {\n        width: 400,\n    },\n    fullList: {\n        width: 'auto',\n    },\n    saudara: {\n        marginRight: '2px',\n        flexDirection: 'row',\n        flexWrap: 'nowrap',\n    },\n    container: {\n        minHeight: '40vh',\n        maxHeight: 200,\n    },\n})\n\nconst DrawerRight = ({ redArrows, blueArrows }) => {\n    const classes = useStyles()\n    const [state, setState] = React.useState({\n        top: false,\n        left: false,\n        bottom: false,\n        right: false,\n    })\n\n    const toggleDrawer = (anchor, open) => (event) => {\n        if (\n            event.type === 'keydown' &&\n            (event.key === 'Tab' || event.key === 'Shift')\n        ) {\n            return\n        }\n\n        setState({ ...state, [anchor]: open })\n    }\n\n    // useEffect(() => {\n    //     let things = Object.values(arrowsData)\n    //     let newArray = []\n    //     things.map((each) => {\n    //         if (each.length > 0) {\n    //             newArray.push()\n    //         }\n    //     })\n    // console.log(\n    //     //     'arrow Data',\n    //     //     Object.values(arrowsData).map((each) => {\n    //     //         each.map((moreEach) => {\n    // console.log(moreEach.time)\n    //     //         })\n    //     //     }),\n    //     // )\n    // console.log('things: ', things)\n    // }, [arrowsData])\n\n    const [renderRedPots, setRenderRedPots] = useState([])\n    const [renderBluePots, setRenderBluePots] = useState([])\n\n    const [bestTimeRed, setbestTimeRed] = useState([])\n    const [bestTimeBlue, setbestTimeBlue] = useState([])\n\n    const loadBestTimeRed = async () => {\n        // console.log('what is server url', SERVER_URL)\n        const { data } = await axios.get(`${SERVER_URL}/timer/all-timer-red`)\n        // console.log('what is red best time: ', data)\n        setbestTimeRed(data)\n    }\n\n    const loadBestTimeBlue = async () => {\n        // console.log('what is server url', SERVER_URL)\n        const { data } = await axios.get(`${SERVER_URL}/timer/all-timer-blue`)\n        // console.log('what is blue best time: ', data)\n        setbestTimeBlue(data)\n    }\n\n    useEffect(() => {\n        loadBestTimeRed()\n        loadBestTimeBlue()\n    }, [])\n\n    // let bestTimeRed = [\n    //     { bestArrow: 1, Besttime: 180 },\n    //     { bestArrow: 2, Besttime: 180 },\n    //     { bestArrow: 3, Besttime: 180 },\n    //     { bestArrow: 4, Besttime: 180 },\n    //     { bestArrow: 5, Besttime: 180 },\n    //     { bestArrow: 6, Besttime: 180 },\n    //     { bestArrow: 7, Besttime: 180 },\n    //     { bestArrow: 8, Besttime: 180 },\n    // ]\n    // let bestTimeBlue = [\n    //     { bestArrow: 1, Besttime: 180 },\n    //     { bestArrow: 2, Besttime: 180 },\n    //     { bestArrow: 3, Besttime: 180 },\n    //     { bestArrow: 4, Besttime: 180 },\n    //     { bestArrow: 5, Besttime: 180 },\n    //     { bestArrow: 6, Besttime: 180 },\n    //     { bestArrow: 7, Besttime: 180 },\n    //     { bestArrow: 8, Besttime: 180 },\n    // ]\n\n    useEffect(() => {\n        let tempArray = []\n        // console.log('arrowsData: ', arrowsData)\n        // Object.values(arrowsData).forEach((each) => {\n        //     if (each.length > 0) {\n        //         tempArray.push(each[0])\n        //     }\n        // })\n        // console.log('temp array: ', tempArray)\n        // setRenderPots(Object.values(arrowsData))\n        // console.log('render pots: ', renderPots)\n\n        // console.log('red arrows: ', redArrows)\n        Object.values(redArrows).forEach((potData) => {\n            if (potData.length > 0) {\n                potData.forEach((eachData) => {\n                    // console.log('best time: ', bestTime[index])\n                    tempArray.push({\n                        ...eachData,\n                        ...bestTimeRed[eachData.arrow - 1],\n                    })\n                })\n            }\n        })\n\n        tempArray.sort((a, b) => {\n            return a.arrow - b.arrow\n        })\n        // console.log('yes really temp: ', tempArray)\n        setRenderRedPots(tempArray)\n    }, [redArrows])\n\n    useEffect(() => {\n        let tempArray = []\n        // console.log('blue arrows: ', blueArrows)\n        Object.values(blueArrows).forEach((potData) => {\n            if (potData.length > 0) {\n                potData.forEach((eachData) => {\n                    // console.log('best time: ', bestTime[index])\n                    tempArray.push({\n                        ...eachData,\n                        ...bestTimeBlue[eachData.arrow - 1],\n                    })\n                })\n            }\n        })\n        tempArray.sort((a, b) => {\n            return a.arrow - b.arrow\n        })\n        setRenderBluePots(tempArray)\n    }, [blueArrows])\n\n    const list = (anchor) => (\n        <div\n            className={clsx(classes.list, {\n                [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n            })}\n            role=\"presentation\"\n            onClick={toggleDrawer(anchor, false)}\n            onKeyDown={toggleDrawer(anchor, false)}\n        >\n            <List>\n                <Paper>\n                    <Typography\n                        variant=\"h2\"\n                        style={{\n                            marginTop: '1vh',\n                            marginLeft: '10vw',\n                            color: 'red',\n                        }}\n                    >\n                        Red\n                    </Typography>\n                    <TableContainer className={classes.container}>\n                        <Table stickyHeader aria-label=\"sticky table\">\n                            <TableHead>\n                                <TableRow>\n                                    {columns.map((column) => (\n                                        <TableCell\n                                            key={column.id}\n                                            align={column.align}\n                                            style={{\n                                                minWidth: column.minWidth,\n                                            }}\n                                        >\n                                            {column.label}\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            </TableHead>\n                            {renderRedPots.map((each) => {\n                                return <DrawerTable RlapPot={[each]} />\n                            })}\n                        </Table>\n                    </TableContainer>\n                    <Typography\n                        variant=\"h2\"\n                        style={{\n                            marginTop: '1vh',\n                            marginLeft: '10vw',\n                            color: 'blue',\n                        }}\n                    >\n                        Blue\n                    </Typography>\n                    <TableContainer className={classes.container}>\n                        <Table stickyHeader aria-label=\"sticky table\">\n                            <TableHead>\n                                <TableRow>\n                                    {columns.map((column) => (\n                                        <TableCell\n                                            key={column.id}\n                                            align={column.align}\n                                            style={{\n                                                minWidth: column.minWidth,\n                                            }}\n                                        >\n                                            {column.label}\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            </TableHead>\n                            {renderBluePots.map((each) => {\n                                return <DrawerTable RlapPot={[each]} />\n                            })}\n                        </Table>\n                    </TableContainer>\n                </Paper>\n            </List>\n        </div>\n    )\n\n    return (\n        <div>\n            {['right'].map((anchor) => (\n                <React.Fragment key={anchor}>\n                    <Button\n                        style={{\n                            marginTop: '2.5vh',\n                            marginLeft: '52vw',\n                            position: 'absolute',\n                        }}\n                        onClick={toggleDrawer(anchor, true)}\n                    >\n                        <MenuIcon />\n                    </Button>\n                    <Drawer\n                        anchor={anchor}\n                        open={state[anchor]}\n                        onClose={toggleDrawer(anchor, false)}\n                    >\n                        {list(anchor)}\n                    </Drawer>\n                </React.Fragment>\n            ))}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        redArrows: state.arrowList.redArrows,\n        blueArrows: state.arrowList.blueArrows,\n        arrowNumber: state.arrowList.numberOfArrows,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addArrow: (barrel, arrow, time) => {\n            dispatch(AddingArrowAction(barrel, arrow, time))\n        },\n        deleteArrow: (id) => {\n            dispatch(DeletingArrowAction(id))\n        },\n        triggerAlert: (msg = 'Arrow Added', alertType = 'success') => {\n            dispatch(setAlert(msg, alertType))\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DrawerRight)\n","import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport GameMap from '../GameMap/GameMap'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport TableUI from '../TableUI'\nimport Divider from '@material-ui/core/Divider'\nimport Switch from '@material-ui/core/Switch'\nimport 'fontsource-roboto'\nimport Grid from '@material-ui/core/Grid'\nimport AddIcon from '@material-ui/icons/Add'\n\nimport { connect } from 'react-redux'\nimport {\n    AddingArrowAction,\n    DeletingArrowAction,\n} from '../../redux/actions/arrowActions'\nimport { setAlert } from '../../redux/actions/alertAction'\nimport TextField from '@material-ui/core/TextField'\nimport DrawerRight from '../DrawerRight'\n\nimport axios from 'axios'\nimport { SERVER_URL } from '../../constants/usefulConstants'\n\nimport { useHistory, withRouter } from \"react-router-dom\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    childTable: {\n        flexGrow: 1,\n        paddingLeft: '2vw',\n        marginTop: '5vh',\n        flexDirection: 'row',\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n    saudara: {\n        marginRight: '2px',\n        flexDirection: 'row',\n        flexWrap: 'nowrap',\n    },\n}))\n\nconst Timer = ({\n    arrowNumber,\n    redArrows,\n    blueArrows,\n    addArrow,\n    deleteArrow,\n    triggerAlert,\n}) => {\n    const MsToTime = (s) => {\n        var ms = s % 1000\n        s = (s - ms) / 1000\n        var secs = s % 60\n        s = (s - secs) / 60\n        var mins = s % 60\n        var hrs = (s - mins) / 60\n\n        return hrs + ':' + mins + ':' + secs + '.' + ms\n    }\n\n    const [startOnce, setstartOnce] = useState(false)\n    const [intervalFunc, setintervalFunc] = useState({})\n    const [RLeft, setRLeft] = useState([])\n    const [RRight, setRRight] = useState([])\n    const [RTop, setRTop] = useState([])\n    const [RBottom, setRBottom] = useState([])\n    const [RCenter, setRCenter] = useState([])\n    const [BLeft, setBLeft] = useState([])\n    const [BRight, setBRight] = useState([])\n    const [BTop, setBTop] = useState([])\n    const [BBottom, setBBottom] = useState([])\n    const [BCenter, setBCenter] = useState([])\n    const [arrowCounter, setarrowCounter] = useState({ arrow: 1 })\n\n    const [timeElapsed, settimeElapsed] = useState({ time: 180000 })\n    // const [timeElapsed, settimeElapsed] = useState({ time: 1000 })\n    const [toggleTimer, settoggleTimer] = useState(false)\n\n    useEffect(() => {\n        if (\n            RLeft.length > 1 &&\n            RRight.length > 1 &&\n            RBottom.length > 1 &&\n            RTop.length > 1 &&\n            RCenter.length > 1\n        ) {\n            alert('Red Team Victory')\n            setEndGame(true)\n        }\n        if (\n            BLeft.length > 1 &&\n            BRight.length > 1 &&\n            BBottom.length > 1 &&\n            BTop.length > 1 &&\n            BCenter.length > 1\n        ) {\n            alert('Blue Team Victory')\n            setEndGame(true)\n        }\n    }, [\n        RLeft,\n        RRight,\n        RBottom,\n        RTop,\n        RCenter,\n        BLeft,\n        BRight,\n        BBottom,\n        BTop,\n        BCenter,\n    ])\n\n    useEffect(() => {\n        if (timeElapsed.time < 0) {\n            StopAction()\n            settimeElapsed({ time: 0 })\n            if (\n                RLeft.length +\n                RRight.length +\n                RTop.length +\n                RBottom.length +\n                RCenter.length >\n                BLeft.length +\n                BRight.length +\n                BTop.length +\n                BBottom.length +\n                BCenter.length\n            ) {\n                alert('Red Team Wins')\n                setEndGame(true)\n            } else {\n                alert('Blue Team Wins')\n                setEndGame(true)\n            }\n        }\n    }, [\n        timeElapsed.time,\n        RLeft,\n        RRight,\n        RBottom,\n        RTop,\n        RCenter,\n        BLeft,\n        BRight,\n        BBottom,\n        BTop,\n        BCenter,\n    ])\n\n    useEffect(() => {\n        setRLeft(redArrows.RLeft)\n        setRRight(redArrows.RRight)\n        setRTop(redArrows.RTop)\n        setRBottom(redArrows.RBottom)\n        setRCenter(redArrows.RCenter)\n        setBLeft(blueArrows.BLeft)\n        setBRight(blueArrows.BRight)\n        setBTop(blueArrows.BTop)\n        setBBottom(blueArrows.BBottom)\n        setBCenter(blueArrows.BCenter)\n        // console.log('arrows data: ', arrowsData);\n    }, [redArrows, blueArrows])\n\n    let timePlaceholder = Date.now()\n\n    const makeTime = () => {\n        setstartOnce(true)\n        timePlaceholder = Date.now()\n        setintervalFunc(\n            setInterval(() => {\n                const temp = Date.now()\n                settimeElapsed((timeElapsed) => {\n                    return {\n                        time: timeElapsed.time - (temp - timePlaceholder),\n                    }\n                })\n                timePlaceholder = temp\n            }, 10),\n        )\n    }\n\n    const StopAction = () => {\n        clearInterval(intervalFunc)\n        // console.log('stop')\n    }\n\n    const Restart = () => {\n        clearInterval(intervalFunc)\n        setstartOnce(false)\n        // console.log('what is the time: ', timeElapsed)\n        toggleTimer == false\n            ? settimeElapsed((timeElapsed) => {\n                return {\n                    time: 180000,\n                }\n            })\n            : settimeElapsed((timeElapsed) => {\n                return {\n                    time: 60000,\n                }\n            })``\n    }\n\n    const handleToggletimer = (event) => {\n        settoggleTimer(!toggleTimer)\n        timeElapsed.time == 180000\n            ? settimeElapsed((timeElapsed) => {\n                return {\n                    time: 60000,\n                }\n            })\n            : settimeElapsed((timeElapsed) => {\n                return {\n                    time: 180000,\n                }\n            })\n    }\n\n    // red violation\n    const [redViolation, setRedViolation] = useState(0)\n    const [blueViolation, setBlueViolation] = useState(0)\n\n    const addRedViolation = () => {\n        triggerAlert('Red Violation !', 'error')\n        setRedViolation((prev) => prev + 1)\n    }\n\n    const addBlueViolation = () => {\n        triggerAlert('Blue Violation !', 'info')\n        setBlueViolation((prev) => prev + 1)\n    }\n\n    const handleTextFieldKeyDown = (event, insideText) => {\n        switch (event.key) {\n            case 'Enter':\n                if (\n                    insideText.toLowerCase() == 'r1' ||\n                    insideText.toLowerCase() == 'RLeft'\n                ) {\n                    addArrow(\n                        trialId,\n                        'RLeft',\n                        arrowNumber,\n                        timeElapsed.time,\n                        'RED',\n                    )\n                    triggerAlert('Add Arrow', 'success')\n                } else if (\n                    insideText.toLowerCase() == 'r2' ||\n                    insideText.toLowerCase() == 'RRight'\n                ) {\n                    addArrow(\n                        trialId,\n                        'RRight',\n                        arrowNumber,\n                        timeElapsed.time,\n                        'RED',\n                    )\n                    triggerAlert('Add Arrow', 'success')\n                } else if (\n                    insideText.toLowerCase() == 'r3' ||\n                    insideText.toLowerCase() == 'RTop'\n                ) {\n                    addArrow(\n                        trialId,\n                        'RTop',\n                        arrowNumber,\n                        timeElapsed.time,\n                        'RED',\n                    )\n                    triggerAlert('Add Arrow', 'success')\n                } else if (\n                    insideText.toLowerCase() == 'r4' ||\n                    insideText.toLowerCase() == 'RCenter'\n                ) {\n                    addArrow(\n                        trialId,\n                        'RCenter',\n                        arrowNumber,\n                        timeElapsed.time,\n                        'RED',\n                    )\n                    triggerAlert('Add Arrow', 'success')\n                } else if (\n                    insideText.toLowerCase() == 'r5' ||\n                    insideText.toLowerCase() == 'RBottom'\n                ) {\n                    addArrow(\n                        trialId,\n                        'RBottom',\n                        arrowNumber,\n                        timeElapsed.time,\n                        'RED',\n                    )\n                    triggerAlert('Add Arrow', 'success')\n                } else if (\n                    insideText.toLowerCase() == 'b1' ||\n                    insideText.toLowerCase() == 'BLeft'\n                ) {\n                    addArrow(\n                        trialId,\n                        'BLeft',\n                        arrowNumber,\n                        timeElapsed.time,\n                        'BLUE',\n                    )\n                    triggerAlert('Add Arrow', 'success')\n                } else if (\n                    insideText.toLowerCase() == 'b2' ||\n                    insideText.toLowerCase() == 'BRight'\n                ) {\n                    addArrow(\n                        trialId,\n                        'BRight',\n                        arrowNumber,\n                        timeElapsed.time,\n                        'BLUE',\n                    )\n                    triggerAlert('Add Arrow', 'success')\n                } else if (\n                    insideText.toLowerCase() == 'b3' ||\n                    insideText.toLowerCase() == 'BTop'\n                ) {\n                    addArrow(\n                        trialId,\n                        'BTop',\n                        arrowNumber,\n                        timeElapsed.time,\n                        'BLUE',\n                    )\n                    triggerAlert('Add Arrow', 'success')\n                } else if (\n                    insideText.toLowerCase() == 'b4' ||\n                    insideText.toLowerCase() == 'BCenter'\n                ) {\n                    addArrow(\n                        trialId,\n                        'BCenter',\n                        arrowNumber,\n                        timeElapsed.time,\n                        'BLUE',\n                    )\n                    triggerAlert('Add Arrow', 'success')\n                } else if (\n                    insideText.toLowerCase() == 'b5' ||\n                    insideText.toLowerCase() == 'BBottom'\n                ) {\n                    addArrow(\n                        trialId,\n                        'BBottom',\n                        arrowNumber,\n                        timeElapsed.time,\n                        'BLUE',\n                    )\n                    triggerAlert('Add Arrow', 'success')\n                }\n                break\n            default:\n                break\n        }\n    }\n\n    const [insideText, setinsideText] = useState('')\n    const [endGame, setEndGame] = useState(false)\n    const classes = useStyles()\n\n    const [bestTimeRed, setbestTimeRed] = useState([])\n    const [bestTimeBlue, setbestTimeBlue] = useState([])\n\n    const loadBestTimeRed = async () => {\n        const { data } = await axios.get(`${SERVER_URL}/timer/all-timer-red`)\n        // console.log('best time: ', data)\n        setbestTimeRed(data)\n    }\n\n    const loadBestTimeBlue = async () => {\n        const { data } = await axios.get(`${SERVER_URL}/timer/all-timer-blue`)\n        setbestTimeBlue(data)\n    }\n\n    useEffect(() => {\n        loadBestTimeRed()\n        loadBestTimeBlue()\n    }, [])\n\n    const redUpload = async (arrow, besttime) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n\n        const { data } = await axios.post(\n            `${SERVER_URL}/timer/add-timer-red`,\n            { arrow: arrow, bestTime: besttime },\n            config,\n        )\n    }\n\n    const blueUpload = async (arrow, besttime) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n\n        const { data } = await axios.post(\n            `${SERVER_URL}/timer/add-timer-blue`,\n            { arrow: arrow, bestTime: besttime },\n            config,\n        )\n    }\n\n    const redRegularUpload = async (arrow, time) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n\n        console.log('data to be sent red: ', \"arrow: \", arrow, \"time: \", time, \"trialId: \", trialId)\n\n        const { data } = await axios.post(\n            `${SERVER_URL}/regularTimer/add-regTimer-red`,\n            { arrow: arrow, time: time, trial: trialId },\n            config,\n        )\n    }\n\n    const blueRegularUpload = async (arrow, time) => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n\n        console.log('data to be sent blue: ', \"arrow: \", arrow, \"time: \", time, \"trialId: \", trialId)\n\n        const { data } = await axios.post(\n            `${SERVER_URL}/regularTimer/add-regTimer-blue`,\n            { arrow: arrow, time: time, trial: trialId },\n            config,\n        )\n    }\n\n    const incrementTrialId = async () => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        }\n\n        const { data } = await axios.post(\n            `${SERVER_URL}/trialRouter/setTrialId`,\n            { trialId: trialId },\n            config,\n        )\n        // console.log('id data: ', data)\n    }\n\n    const [seeResultButton, setSeeResultButton] = useState(false)\n\n    // handle upload state\n    const handleUpload = () => {\n        // check current vs the best time\n        // RED\n        let tempArrayRed = []\n        let tempArrayBlue = []\n\n        if ([redArrows].length > 0) {\n            Object.values(redArrows).forEach((potData) => {\n                if (potData.length > 0) {\n                    potData.forEach((eachData) => {\n                        tempArrayRed.push({\n                            ...eachData,\n                            ...bestTimeRed[eachData.arrow - 1],\n                        })\n                    })\n                }\n            })\n            tempArrayRed.sort((a, b) => {\n                return a.arrow - b.arrow\n            })\n\n            if (bestTimeRed.length < tempArrayRed.length) {\n                tempArrayRed.map((each) => {\n                    redUpload(each.arrow, parseFloat(each.time))\n                })\n            } else {\n                tempArrayRed.map((each) => {\n                    if (parseFloat(each.time) > each.Besttime) {\n                        // overrideBestTime.push(each)\n                        redRegularUpload(each.arrow, parseFloat(each.time))\n                        redUpload(each.arrow, parseFloat(each.time))\n                    } else {\n                        redRegularUpload(each.arrow, parseFloat(each.time))\n                    }\n                })\n            }\n        }\n\n        // BLUE\n\n        if ([blueArrows].length > 0) {\n            Object.values(blueArrows).forEach((potData) => {\n                if (potData.length > 0) {\n                    potData.forEach((eachData) => {\n                        tempArrayBlue.push({\n                            ...eachData,\n                            ...bestTimeBlue[eachData.arrow - 1],\n                        })\n                    })\n                }\n            })\n            tempArrayBlue.sort((a, b) => {\n                return a.arrow - b.arrow\n            })\n\n            if (bestTimeBlue.length < tempArrayBlue.length) {\n                tempArrayBlue.map((each) => {\n                    blueUpload(each.arrow, parseFloat(each.time))\n                })\n            } else {\n                tempArrayBlue.map((each) => {\n                    if (parseFloat(each.time) > each.Besttime) {\n                        // overrideBestTime.push(each)\n                        blueRegularUpload(each.arrow, parseFloat(each.time))\n                        blueUpload(each.arrow, parseFloat(each.time))\n                    } else {\n                        blueRegularUpload(each.arrow, parseFloat(each.time))\n                    }\n                })\n            }\n        }\n\n        // increment the    ial id in database\n        incrementTrialId()\n        setSeeResultButton(true)\n    }\n\n    // load the current trial id\n    const [trialId, settrialId] = useState(0)\n\n    const getTrialId = async () => {\n        const { data } = await axios.get(`${SERVER_URL}/trialRouter/getTrialId`)\n        settrialId(data[0].trialId)\n    }\n\n    useEffect(() => {\n        getTrialId()\n    }, [])\n\n    let history = useHistory();\n\n    const handleResult = () => {\n        history.push(\"/result-screen\");\n    }\n\n    return (\n        <>\n            <div>\n                <Grid\n                    container\n                    className={classes.saudara}\n                    style={{ justifyContent: 'center' }}\n                >\n                    <DrawerRight />\n                    <h1>{MsToTime(timeElapsed.time)}</h1>\n                    {timeElapsed.time > 60 ? (\n                        <h5 style={{ marginTop: '4.5vh', marginLeft: '2vw' }}>\n                            Game time\n                        </h5>\n                    ) : (\n                        <h5 style={{ marginTop: '4.5vh', marginLeft: '2vw' }}>\n                            preparation time\n                        </h5>\n                    )}\n                </Grid>\n                <Switch\n                    checked={toggleTimer}\n                    onChange={handleToggletimer}\n                    color=\"secondary\"\n                    name=\"toggleTimer\"\n                    inputProps={{ 'aria-label': 'secondary checkbox' }}\n                />\n                <Button\n                    variant=\"contained\"\n                    disabled={startOnce}\n                    onClick={makeTime}\n                    style={{ marginLeft: '1vw' }}\n                >\n                    Start\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    onClick={Restart}\n                    style={{ marginLeft: '1vw' }}\n                >\n                    Restart\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    onClick={StopAction}\n                    style={{ marginLeft: '1vw' }}\n                >\n                    Stop\n                </Button>\n                {/* <Button variant=\"contained\" onClick={StopAction} style={{ marginLeft: \"1vw\" }}>\n                    Stop\n                </Button> */}\n                <TextField\n                    label=\"Add Arrow\"\n                    id=\"outlined-size-small\"\n                    defaultValue=\"\"\n                    variant=\"outlined\"\n                    size=\"small\"\n                    style={{ width: '7em', marginLeft: '1vw' }}\n                    onChange={(event) => {\n                        setinsideText(event.target.value)\n                    }}\n                    onKeyDown={(event) => {\n                        handleTextFieldKeyDown(event, insideText)\n                    }}\n                />\n                {endGame && (\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ marginLeft: '1vw' }}\n                        onClick={handleUpload}\n                    >\n                        Upload\n                    </Button>\n                )}\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginLeft: '1vw' }}\n                    onClick={handleUpload}\n                >\n                    Upload\n                </Button>\n                {seeResultButton && (\n                    <Button\n                        variant=\"outlined\"\n                        color=\"secondary\"\n                        style={{ marginLeft: '1vw' }}\n                        onClick={handleResult}\n                    >\n                        See results >>\n                    </Button>\n                )}\n                {/* <Button variant=\"contained\" onClick={lapAction}>\n                    Lap\n                </Button> */}\n                {/* <Button variant=\"contained\" onClick={() => {\n                    addArrow(1, arrowNumber, timeElapsed.time);\n                }}>\n                    add bar 1\n                </Button>\n                <Button variant=\"contained\" onClick={() => {\n                    addArrow(2, arrowNumber, timeElapsed.time);\n                }}>\n                    add bar 2\n                </Button>\n                <Button variant=\"contained\" onClick={() => {\n                    deleteArrow(1);\n                }}>\n                    del bar 1\n                </Button>\n                <Button variant=\"contained\" onClick={() => {\n                    deleteArrow(2);\n                }}>\n                    del bar 2\n                </Button> */}\n            </div>\n\n            <div className={classes.root}>\n                <Grid container className={classes.saudara}>\n                    <Grid\n                        container\n                        style={{ maxWidth: '40vw', marginTop: '5vh' }}\n                    >\n                        <GameMap\n                            trialID={trialId}\n                            addingArrow={addArrow}\n                            arrowNumber={arrowNumber}\n                            timeElapsed={timeElapsed.time}\n                        />\n                    </Grid>\n                    <Grid\n                        style={{ flex: 1, flexGrow: 1, flexDirection: 'row' }}\n                    >\n                        <Grid container className={classes.saudara}>\n                            <Typography\n                                variant=\"h6\"\n                                style={{\n                                    marginTop: '5vh',\n                                    color: 'green',\n                                    marginLeft: '4vw',\n                                }}\n                            >\n                                Violation : {redViolation}\n                            </Typography>\n                            <Typography\n                                variant=\"h2\"\n                                style={{\n                                    marginTop: '1vh',\n                                    marginLeft: '10vw',\n                                    color: 'red',\n                                }}\n                            >\n                                Red :{' '}\n                                {RLeft.length +\n                                    RRight.length +\n                                    RTop.length +\n                                    RBottom.length +\n                                    RCenter.length}\n                            </Typography>\n                            <Button\n                                variant=\"outlined\"\n                                color=\"secondary\"\n                                startIcon={<AddIcon />}\n                                style={{\n                                    marginTop: '3vh',\n                                    marginLeft: '3vw',\n                                    maxHeight: '5vh',\n                                }}\n                                onClick={addRedViolation}\n                            >\n                                <Typography style={{ color: 'red' }}>\n                                    Violation\n                                </Typography>\n                            </Button>\n                        </Grid>\n                        <Grid\n                            container\n                            className={classes.saudara}\n                            style={{ marginBottom: '3vh' }}\n                        >\n                            <Grid\n                                style={{\n                                    maxWidth: '170px',\n                                    marginTop: '2vh',\n                                    marginLeft: '0.5vw',\n                                }}\n                            >\n                                <TableUI RlapPot={RLeft} />\n                            </Grid>\n                            <Grid\n                                style={{\n                                    maxWidth: '170px',\n                                    marginTop: '2vh',\n                                    marginLeft: '0.5vw',\n                                }}\n                            >\n                                <TableUI RlapPot={RRight} />\n                            </Grid>\n                            <Grid\n                                style={{\n                                    maxWidth: '170px',\n                                    marginTop: '2vh',\n                                    marginLeft: '0.5vw',\n                                }}\n                            >\n                                <TableUI RlapPot={RTop} />\n                            </Grid>\n                            <Grid\n                                style={{\n                                    maxWidth: '170px',\n                                    marginTop: '2vh',\n                                    marginLeft: '0.5vw',\n                                }}\n                            >\n                                <TableUI RlapPot={RCenter} />\n                            </Grid>\n                            <Grid\n                                style={{\n                                    maxWidth: '170px',\n                                    marginTop: '2vh',\n                                    marginLeft: '0.5vw',\n                                }}\n                            >\n                                <TableUI RlapPot={RBottom} />\n                            </Grid>\n                        </Grid>\n                        <Grid style={{ maxWidth: '70vw', marginLeft: '0.5vw' }}>\n                            <hr />\n                        </Grid>\n                        <Grid container className={classes.saudara}>\n                            <Typography\n                                variant=\"h6\"\n                                style={{\n                                    marginTop: '5vh',\n                                    color: 'green',\n                                    marginLeft: '4vw',\n                                }}\n                            >\n                                Violation : {blueViolation}\n                            </Typography>\n                            <Typography\n                                variant=\"h2\"\n                                style={{\n                                    marginTop: '1vh',\n                                    marginLeft: '10vw',\n                                    color: 'blue',\n                                }}\n                            >\n                                Blue:{' '}\n                                {BLeft.length +\n                                    BRight.length +\n                                    BTop.length +\n                                    BBottom.length +\n                                    BCenter.length}\n                            </Typography>\n                            <Button\n                                variant=\"outlined\"\n                                color=\"secondary\"\n                                startIcon={<AddIcon />}\n                                style={{\n                                    marginTop: '4vh',\n                                    marginLeft: '3vw',\n                                    maxHeight: '5vh',\n                                }}\n                                onClick={addBlueViolation}\n                            >\n                                <Typography style={{ color: 'red' }}>\n                                    Violation\n                                </Typography>\n                            </Button>\n                        </Grid>\n                        <Grid container className={classes.saudara}>\n                            <Grid\n                                style={{\n                                    maxWidth: '170px',\n                                    marginTop: '2vh',\n                                    marginLeft: '0.5vw',\n                                }}\n                            >\n                                <TableUI RlapPot={BLeft} />\n                            </Grid>\n                            <Grid\n                                style={{\n                                    maxWidth: '170px',\n                                    marginTop: '2vh',\n                                    marginLeft: '0.5vw',\n                                }}\n                            >\n                                <TableUI RlapPot={BRight} />\n                            </Grid>\n                            <Grid\n                                style={{\n                                    maxWidth: '170px',\n                                    marginTop: '2vh',\n                                    marginLeft: '0.5vw',\n                                }}\n                            >\n                                <TableUI RlapPot={BTop} />\n                            </Grid>\n                            <Grid\n                                style={{\n                                    maxWidth: '170px',\n                                    marginTop: '2vh',\n                                    marginLeft: '0.5vw',\n                                }}\n                            >\n                                <TableUI RlapPot={BCenter} />\n                            </Grid>\n                            <Grid\n                                style={{\n                                    maxWidth: '170px',\n                                    marginTop: '2vh',\n                                    marginLeft: '0.5vw',\n                                }}\n                            >\n                                <TableUI RlapPot={BBottom} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        redArrows: state.arrowList.redArrows,\n        blueArrows: state.arrowList.blueArrows,\n        arrowNumber: state.arrowList.numberOfArrows,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addArrow: (trialId, barrel, arrow, time, type) => {\n            dispatch(AddingArrowAction(trialId, barrel, arrow, time, type))\n        },\n        // deleteArrow: (id) => { dispatch(DeletingArrowAction(id)) },\n        triggerAlert: (msg = 'Arrow Added', alertType = 'success') => {\n            dispatch(setAlert(msg, alertType))\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer)\n","import React from 'react'\nimport AlertIcon from './components/layout/AlertIcon'\nimport './App.css'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Timer from './components/timer/timer'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport ResultScreen from './screens/ResultScreen'\n\nconst useStyles = makeStyles({\n    alert: {\n        position: 'absolute',\n        maxWidth: '20vw',\n    },\n    someMargin: {\n        // marginTop: '10vh',\n    },\n})\n\nconst App = () => {\n    const classes = useStyles()\n    return (\n        <div className=\"App\">\n            <div className={classes.alert}>\n                <AlertIcon />\n            </div>\n            {/* <Router>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Timer />\n                    </Route>\n                    <Route exact path=\"/result-screen\">\n                        <ResultScreen />\n                    </Route>\n                </Switch>\n            </Router> */}\n                        <Timer />\n        </div>\n    )\n}\n\nexport default App\n","import React, { useEffect, useState } from 'react'\nimport SimpleLineChart from '../components/charts/SimpleLineChart'\nimport CarbonLineChart from '../components/charts/CarbonLineChart'\nimport axios from 'axios'\nimport { SERVER_URL } from '../constants/usefulConstants'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n\nconst useStyles = makeStyles({\n    saudara: {\n        // marginLeft: 'vw',\n        flexDirection: 'row',\n        flexWrap: 'nowrap',\n        width: '99%',\n    },\n    container: {\n        minHeight: '40vh',\n        maxHeight: 200,\n    },\n})\n\nconst ResultScreen = () => {\n    const classes = useStyles()\n\n    const [avgDataRed, setAvgDataRed] = useState([])\n    const [avgDataBlue, setAvgDataBlue] = useState([])\n\n    const getAverageDataRed = async () => {\n        const { data } = await axios.get(\n            `${SERVER_URL}/avgTimer/get-avgTimer-red`,\n        )\n\n        setAvgDataRed(data)\n\n        // console.log('avg data:', data)\n    }\n    const getAverageDataBlue = async () => {\n        const { data } = await axios.get(\n            `${SERVER_URL}/avgTimer/get-avgTimer-blue`,\n        )\n        setAvgDataBlue(data)\n\n        // console.log('avg data:', data)\n    }\n\n    useEffect(() => {\n        getAverageDataRed()\n        getAverageDataBlue()\n    }, [])\n    return (\n        <>\n            <Grid\n                style={{\n                    display: 'flex',\n                    flex: 1,\n                    flexGrow: 1,\n                    flexDirection: 'row',\n                }}\n            >\n                <Grid container className={classes.saudara}>\n                    <Typography\n                        variant=\"h2\"\n                        style={{\n                            marginTop: '1vh',\n                            marginLeft: '16vw',\n                            color: 'red',\n                            marginRight: '25vw',\n                        }}\n                    >\n                        Red\n                    </Typography>\n                    <Typography\n                        variant=\"h2\"\n                        style={{\n                            marginTop: '1vh',\n                            marginLeft: '25vw',\n                            color: 'Blue',\n                        }}\n                    >\n                        Blue\n                    </Typography>\n                </Grid>\n            </Grid>\n            <Grid\n                style={{\n                    display: 'flex',\n                    flex: 1,\n                    flexGrow: 1,\n                    flexDirection: 'row',\n                }}\n            >\n                <Grid container className={classes.saudara}>\n                    <SimpleLineChart avg={avgDataRed} />\n                    {/* <CarbonLineChart /> */}\n                    <hr />\n                    {/* <CarbonLineChart /> */}\n                    <SimpleLineChart avg={avgDataBlue} />\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n\nexport default ResultScreen\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\n    numberOfArrows: 0,\n    redArrows: {\n        arrow: 0,\n        RLeft: [],\n        RRight: [],\n        RTop: [],\n        RBottom: [],\n        RCenter: []\n    },\n    blueArrows: {\n        arrow: 0,\n        BLeft: [],\n        BRight: [],\n        BTop: [],\n        BBottom: [],\n        BCenter: []\n    },\n    alert: [],\n}\n\nconst arrowTemplate = (id, barrelTarget, arrow, currentTime) => {\n    return ({\n        trialId: id,\n        barrel: barrelTarget,\n        arrow: arrow,\n        time: currentTime\n    })\n}\n\nconst arrowReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case \"ADD_ARROW\": {\n            //there should be a better way\n            //a 2d array allow the data to be more dynamic, ask him\n            // console.log(\"Arrow addition called\")\n            const { trialId, barrel, time, type } = action.payload;\n            //fix this too\n            const newArrow = arrowTemplate(trialId, barrel, type === \"RED\" ? state.redArrows.arrow + 1 : state.blueArrows.arrow + 1, time);\n            let newObject = {};\n            let newArray = []; //redundant\n            // console.log(\"READING TYPE \", type)\n            if (type === \"RED\") {\n                switch (barrel) {\n                    case \"RLeft\":\n                        newArray = [...state.redArrows.RLeft, newArrow];\n                        newObject = { ...state.redArrows, RLeft: newArray, arrow: state.redArrows.arrow + 1 };\n                        break;\n                    case \"RRight\":\n                        newArray = [...state.redArrows.RRight, newArrow];\n                        newObject = { ...state.redArrows, RRight: newArray, arrow: state.redArrows.arrow + 1 };\n                        break;\n                    case \"RTop\":\n                        newArray = [...state.redArrows.RTop, newArrow];\n                        newObject = { ...state.redArrows, RTop: newArray, arrow: state.redArrows.arrow + 1 };\n                        break;\n                    case \"RBottom\":\n                        newArray = [...state.redArrows.RBottom, newArrow];\n                        newObject = { ...state.redArrows, RBottom: newArray, arrow: state.redArrows.arrow + 1 };\n                        break;\n                    case \"RCenter\":\n                        newArray = [...state.redArrows.RCenter, newArrow];\n                        newObject = { ...state.redArrows, RCenter: newArray, arrow: state.redArrows.arrow + 1 };\n                        break;\n                    default:\n                        break;\n                }\n                return ({\n                    ...state,\n                    numberOfArrows: state.numberOfArrows + 1,\n                    redArrows: newObject,\n                })\n            }\n            else {\n                switch (barrel) {\n                    case \"BLeft\":\n                        newArray = [...state.blueArrows.BLeft, newArrow];\n                        newObject = { ...state.blueArrows, BLeft: newArray, arrow: state.blueArrows.arrow + 1 };\n                        break;\n                    case \"BRight\":\n                        newArray = [...state.blueArrows.BRight, newArrow];\n                        newObject = { ...state.blueArrows, BRight: newArray, arrow: state.blueArrows.arrow + 1 };\n                        break;\n                    case \"BTop\":\n                        newArray = [...state.blueArrows.BTop, newArrow];\n                        newObject = { ...state.blueArrows, BTop: newArray, arrow: state.blueArrows.arrow + 1 };\n                        break;\n                    case \"BBottom\":\n                        newArray = [...state.blueArrows.BBottom, newArrow];\n                        newObject = { ...state.blueArrows, BBottom: newArray, arrow: state.blueArrows.arrow + 1 };\n                        break;\n                    case \"BCenter\":\n                        newArray = [...state.blueArrows.BCenter, newArrow];\n                        newObject = { ...state.blueArrows, BCenter: newArray, arrow: state.blueArrows.arrow + 1 };\n                        break;\n                    default:\n                        break;\n                }\n                return ({\n                    ...state,\n                    numberOfArrows: state.numberOfArrows + 1,\n                    blueArrows: newObject,\n                })\n            }\n            // return ({\n            //     ...state,\n            //     numberOfArrows: state.numberOfArrows + 1,\n            //     arrows: newObject\n            // });\n        }\n        case \"DELETE_ARROW\": {\n            //2d array also can play in this part\n            const { global, barrel } = action.payload;\n            let newObject = {};\n            let newArray = [];\n            // console.log(barrel);\n            let currentType = barrel.charAt(0);\n            if (currentType === \"R\") {\n                switch (barrel) {\n                    case \"RLeft\":\n                        newArray = state.redArrows.RLeft.filter(arrow => arrow.globalID !== global);\n                        newObject = { ...state.redArrows, RLeft: newArray, arrow: state.redArrows.arrow - 1 };\n                        break;\n                    case \"RRight\":\n                        newArray = state.redArrows.RRight.filter(arrow => arrow.globalID !== global);\n                        newObject = { ...state.redArrows, RRight: newArray, arrow: state.redArrows.arrow - 1 };\n                        break;\n                    case \"RTop\":\n                        newArray = state.redArrows.RTop.filter(arrow => arrow.globalID !== global);\n                        newObject = { ...state.redArrows, RTop: newArray, arrow: state.redArrows.arrow - 1 };\n                        break;\n                    case \"RBottom\":\n                        newArray = state.redArrows.RBottom.filter(arrow => arrow.globalID !== global);\n                        newObject = { ...state.redArrows, RBottom: newArray, arrow: state.redArrows.arrow - 1 };\n                        break;\n                    case \"RCenter\":\n                        newArray = state.redArrows.RCenter.filter(arrow => arrow.globalID !== global);\n                        newObject = { ...state.redArrows, RCenter: newArray, arrow: state.redArrows.arrow - 1 };\n                        break;\n                    default:\n                        break;\n                }\n                return ({\n                    ...state,\n                    numberOfArrows: state.numberOfArrows - 1,\n                    redArrows: newObject,\n                })\n            }\n            else {\n                switch (barrel) {\n                    case \"BLeft\":\n                        newArray = state.blueArrows.BLeft.filter(arrow => arrow.globalID !== global);\n                        newObject = { ...state.blueArrows, BLeft: newArray, arrow: state.blueArrows.arrow - 1 };\n                        break;\n                    case \"BRight\":\n                        newArray = state.blueArrows.BRight.filter(arrow => arrow.globalID !== global);\n                        newObject = { ...state.blueArrows, BRight: newArray, arrow: state.blueArrows.arrow - 1 };\n                        break;\n                    case \"BTop\":\n                        newArray = state.blueArrows.BTop.filter(arrow => arrow.globalID !== global);\n                        newObject = { ...state.blueArrows, BTop: newArray, arrow: state.blueArrows.arrow - 1 };\n                        break;\n                    case \"BBottom\":\n                        newArray = state.blueArrows.BBottom.filter(arrow => arrow.globalID !== global);\n                        newObject = { ...state.blueArrows, BBottom: newArray, arrow: state.blueArrows.arrow - 1 };\n                        break;\n                    case \"BCenter\":\n                        newArray = state.blueArrows.BCenter.filter(arrow => arrow.globalID !== global);\n                        newObject = { ...state.blueArrows, BCenter: newArray, arrow: state.blueArrows.arrow - 1 };\n                        break;\n                    default:\n                        break;\n                }\n                return ({\n                    ...state,\n                    numberOfArrows: state.numberOfArrows - 1,\n                    blueArrows: newObject,\n                })\n            }\n        }\n        default: {\n\n            return state;\n        }\n    }\n}\n\nexport default arrowReducer;\n\n","import { SET_ALERT, REMOVE_ALERT } from '../../constants/alertConstants'\n\nconst initialState = {\n    numberOfArrows: 0,\n    arrows: {\n        RLeft: [],\n        RRight: [],\n        RTop: [],\n        RBottom: [],\n        RCenter: [],\n        BLeft: [],\n        BRight: [],\n        BTop: [],\n        BBottom: [],\n        BCenter: [],\n    },\n    alert: [],\n}\n\nconst alertReducer = (state = initialState, action) => {\n    const { type, payload } = action\n    switch (type) {\n        case SET_ALERT:\n            return { ...state, alert: [...state.alert, payload] }\n        case REMOVE_ALERT:\n            return {\n                ...state,\n                alert: state.alert.filter((alert) => alert.id !== payload),\n            }\n        default:\n            return state\n    }\n}\n\nexport default alertReducer\n","import { combineReducers } from 'redux'\nimport arrowList from \"./arrowGroupReducers\"\nimport alertReducer from './alertReducer';\n\n\nexport default combineReducers({ arrowList, alertReducer });","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducers from './redux/reducers/index'\nimport { applyMiddleware } from 'redux'\n\nimport thunk from 'redux-thunk'\n\nimport { composeWithDevTools } from 'redux-devtools-extension'\nconst middleware = [thunk]\n\nconst initialState = {\n    numberOfArrows: 0,\n    arrows: {\n        RLeft: [],\n        RRight: [],\n        RTop: [],\n        RBottom: [],\n        RCenter: [],\n        BLeft: [],\n        BRight: [],\n        BTop: [],\n        BBottom: [],\n        BCenter: [],\n    },\n    alert: [],\n}\n\nconst store = createStore(\n    rootReducers,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware)),\n)\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}